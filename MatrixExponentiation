/*
Matrix Exponentiation
 Used to solve recurrence relations with high contraints

 We can convert linear recurrence relations to sort of mulitplcations

 for eq; find nth fibonacci number if n=10^18

we know f(n)= f(n-1)+f(n-2);

In terms of matrix relations it is

|1 1| *  |	f(n)	|  =  |f(n+1)|
|1 0|    |	f(n-1)	|	  |f(n)	|

Now for f(n)
the relation will be

T^(n-2)* f(2)= f(n)

f(2)= [1]
	  [1]

Time Complexity: O(logn)

*/
const int sz = 10;
int mod = 1e9 + 7;
struct Mat {
	int m[sz][sz];
	Mat() {
		memset(m, 0, sizeof(m));
	}
	void identity() {
		//makes matrix identity
		for (int i = 0; i < sz; i++)
			m[i][i] = 1;
	}
	Mat operator*(Mat a) {
		Mat res;
		for (int i = 0; i < sz; i++) {
			for (int j = 0; j < sz; j++) {
				for (int k = 0; k < sz; k++) {
					res.m[i][j] += m[i][k] * a.m[k][j];
					res.m[i][j] %= mod;
				}
			}
		}
		return res;
	}
};


int Fib(int n) {
	Mat res;
	res.identity();
	Mat T;
	T.m[0][1] = T.m[0][0] = T.m[1][0] = 1;

	n -= 2;
	if (n <= 0) return 1;

	while (n) {
		if (n & 1) res = res * T;
		T = T * T;
		n >>= 1;
	}

	return res.m[0][0] + res.m[0][1];
}
